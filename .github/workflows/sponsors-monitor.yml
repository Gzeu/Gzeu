name: 🎯 Monitor GitHub Sponsors
on:
  schedule:
    - cron: '0 */6 * * *' # Every 6 hours
  workflow_dispatch: # Manual trigger

permissions:
  contents: write

jobs:
  monitor-sponsors:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔍 Check Current Sponsors
        id: check-sponsors
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Fetching current sponsors..."
          
          # Create sponsors data directory
          mkdir -p .sponsors-data
          
          # Fetch current sponsors using corrected GraphQL API
          curl -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -X POST \
            -d '{"query":"query { viewer { sponsors(first: 100) { nodes { ... on User { login createdAt } ... on Organization { login createdAt } } } } }"}' \
            https://api.github.com/graphql > .sponsors-data/current-sponsors.json
          
          # Debug: Show API response
          echo "📊 API Response:"
          cat .sponsors-data/current-sponsors.json
          
          # Check if we have valid data
          if jq -e '.data.viewer.sponsors.nodes' .sponsors-data/current-sponsors.json >/dev/null 2>&1; then
            echo "✅ Valid sponsor data received"
            
            # Check if we have previous sponsors data
            if [ -f ".sponsors-data/previous-sponsors.json" ]; then
              echo "📊 Comparing with previous sponsors..."
              
              # Extract current sponsor logins
              current_sponsors=$(jq -r '.data.viewer.sponsors.nodes[].login // empty' .sponsors-data/current-sponsors.json | sort)
              previous_sponsors=$(jq -r '.data.viewer.sponsors.nodes[].login // empty' .sponsors-data/previous-sponsors.json | sort)
              
              # Find new sponsors
              new_sponsors=$(comm -13 <(echo "$previous_sponsors") <(echo "$current_sponsors"))
              
              if [ -n "$new_sponsors" ]; then
                echo "🎉 New sponsors detected!"
                echo "new_sponsors=true" >> $GITHUB_OUTPUT
                
                # Get detailed info for new sponsors
                for sponsor in $new_sponsors; do
                  sponsor_info="$sponsor - New GitHub Sponsor"
                  echo "sponsor_info=$sponsor_info" >> $GITHUB_OUTPUT
                  echo "sponsor_login=$sponsor" >> $GITHUB_OUTPUT
                  break # Take first new sponsor for notification
                done
              else
                echo "📊 No new sponsors detected"
                echo "new_sponsors=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "🚀 First run - creating baseline"
              echo "new_sponsors=false" >> $GITHUB_OUTPUT
            fi
            
            # Save current as previous for next run
            cp .sponsors-data/current-sponsors.json .sponsors-data/previous-sponsors.json
            
            # Show current sponsor count
            sponsor_count=$(jq '.data.viewer.sponsors.nodes | length' .sponsors-data/current-sponsors.json)
            echo "📈 Total sponsors: $sponsor_count"
          else
            echo "⚠️ API returned errors or invalid data"
            echo "new_sponsors=false" >> $GITHUB_OUTPUT
            
            # Still save the response for debugging
            cp .sponsors-data/current-sponsors.json .sponsors-data/previous-sponsors.json
          fi

      - name: 💾 Commit Sponsor Data
        if: always()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Sponsor Bot"
          git add .sponsors-data/
          git diff --staged --quiet || git commit -m "📊 Update sponsor data - $(date)"
          git push || echo "Nothing to push"

      - name: 📱 Send Telegram Notification
        if: steps.check-sponsors.outputs.new_sponsors == 'true'
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
            MESSAGE="🎉 <b>New GitHub Sponsor!</b>%0A%0A<b>Sponsor:</b> ${{ steps.check-sponsors.outputs.sponsor_info }}%0A<b>Profile:</b> https://github.com/${{ steps.check-sponsors.outputs.sponsor_login }}%0A<b>Your Profile:</b> https://github.com/Gzeu%0A<b>Time:</b> $(date)%0A%0AThank you for supporting the projects! 🚀💖"
            
            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
              -d "chat_id=$TELEGRAM_CHAT_ID" \
              -d "text=$MESSAGE" \
              -d "parse_mode=HTML" \
              -d "disable_web_page_preview=false"
            
            echo "✅ Telegram notification sent successfully"
          else
            echo "⚠️ Telegram credentials not configured - skipping notification"
          fi

      - name: 🎯 Auto-Grant Repository Access
        if: steps.check-sponsors.outputs.new_sponsors == 'true'
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          if [ -n "$GH_PAT" ]; then
            sponsor="${{ steps.check-sponsors.outputs.sponsor_login }}"
            
            echo "🎯 Processing access for $sponsor"
            
            # Add to private repos (adjust repo names as needed)
            repos_to_grant=("mvx-proofmind" "carbonflow-ai")
            
            for repo in "${repos_to_grant[@]}"; do
              echo "Adding $sponsor to $repo..."
              curl -X PUT \
                -H "Authorization: Bearer $GH_PAT" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/Gzeu/$repo/collaborators/$sponsor" \
                -d '{"permission":"pull"}' || echo "Failed to add $sponsor to $repo"
            done
            
            echo "✅ Repository access management completed"
          else
            echo "⚠️ GitHub PAT not configured - skipping auto-grant access"
          fi

      - name: 📊 Update Sponsor Stats
        run: |
          # Calculate sponsor statistics (handle null data gracefully)
          if jq -e '.data.viewer.sponsors.nodes' .sponsors-data/current-sponsors.json >/dev/null 2>&1; then
            total_sponsors=$(jq '.data.viewer.sponsors.nodes | length' .sponsors-data/current-sponsors.json)
            echo "📊 Current Stats:"
            echo "   Total Sponsors: $total_sponsors"
            echo "   Monthly Revenue: N/A (tier data not available with current token)"
          else
            total_sponsors=0
            echo "📊 Current Stats: No valid data"
          fi
          
          # Create or update sponsor stats file
          cat > .sponsors-data/stats.json << EOF
          {
            "total_sponsors": $total_sponsors,
            "monthly_revenue": 0,
            "last_updated": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "note": "Detailed tier data requires GitHub Sponsors API access"
          }
          EOF

      - name: 🎉 Display Current Sponsors (Debug)
        run: |
          echo "📋 Current Sponsors Summary:"
          # Handle case where data might be null or have errors
          if jq -e '.data.viewer.sponsors.nodes' .sponsors-data/current-sponsors.json >/dev/null 2>&1; then
            sponsor_count=$(jq '.data.viewer.sponsors.nodes | length' .sponsors-data/current-sponsors.json)
            if [ "$sponsor_count" -gt 0 ]; then
              jq -r '.data.viewer.sponsors.nodes[] | "🎯 @\(.login // "unknown") - GitHub Sponsor"' .sponsors-data/current-sponsors.json
            else
              echo "No sponsors found"
            fi
          else
            echo "No valid sponsor data available"
            echo "This might be due to:"
            echo "- No GitHub Sponsors program enabled"
            echo "- GITHUB_TOKEN lacks required permissions"
            echo "- Need to use GH_PAT with user:read scope"
          fi